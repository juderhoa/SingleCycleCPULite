library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity CPU is
  Port (    clk : in STD_LOGIC;
            rst : in STD_LOGIC;
            ins : out STD_LOGIC_VECTOR(31 downto 0);
            showpc: out STD_LOGIC_VECTOR(8 downto 0);
            regreadtst1: out STD_LOGIC_VECTOR(31 downto 0);
            regreadtst2: out STD_LOGIC_VECTOR(31 downto 0);
            Registerin1: out STD_LOGIC_VECTOR(4 downto 0);
            Registerin2: out STD_LOGIC_VECTOR(4 downto 0);
            RegisterWriteto: out STD_LOGIC_VECTOR(4 downto 0);
            RegisterWriteData: out STD_LOGIC_VECTOR(31 downto 0);
            port1tst, port2tst:out std_logic_vector(31 downto 0);
            ALUcontroltst: out std_logic_vector(3 downto 0);
            ALUouttst: out std_logic_vector(31 downto 0);
            ALUOp_intst : out std_logic_vector(1 downto 0);
            memreadtst: out std_logic;
            memwritetst: out std_logic_vector(0 downto 0);
            MemDataIntst: out std_logic_vector (31 downto 0);
            MemDataOuttst: out std_logic_vector(31 downto 0)
            
            );
end CPU;

architecture Behavioral of CPU is

component control is
   Port (clk_c : in STD_LOGIC;
        rst_c : in STD_LOGIC;
        inst_31_26 : in STD_LOGIC_VECTOR (5 downto 0);
        RegDst_c : out STD_LOGIC;
        Jump_c : out STD_LOGIC;
        Branch_c : out STD_LOGIC;
        MemRead_c : out STD_LOGIC;
        MemtoReg_c : out STD_LOGIC;
        ALUOp_c : out STD_LOGIC_VECTOR (1 downto 0);
        MemWrite_c : out STD_LOGIC_VECTOR (0 downto 0);
        ALUSrc_c : out STD_LOGIC;
        RegWrite_c : out STD_LOGIC );
end component control;

component ALU_control is
  Port (ALUOp_in : in std_logic_vector(1 downto 0);
        inst_ALU_con : in std_logic_vector(5 downto 0);
        ALUcontrol_out : out std_logic_vector(3 downto 0));
end component ALU_control;

COMPONENT blk_mem_gen_0
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(31 DOWNTO 0));
END COMPONENT;

COMPONENT blk_mem_gen_1
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(8 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
  );
END COMPONENT;

component ALU is
port (port1, port2: in std_logic_vector(31 downto 0);
clk_alu: in std_logic;
ALUcontrol: in std_logic_vector(3 downto 0);
flags_alu: out std_logic_vector(3 downto 0); -- N, Z, C, V in order
ALUout: out std_logic_vector(31 downto 0);
shiftamt: in std_logic_vector(4 downto 0));
end component ALU;

component reg_file is
  Port (clk_r : in STD_LOGIC;
        rst_r : in STD_LOGIC;
        RegWrite_r : in STD_LOGIC;
        read_reg1 : in STD_LOGIC_VECTOR (4 downto 0);
        read_reg2 : in STD_LOGIC_VECTOR (4 downto 0);
        write_reg : in STD_LOGIC_VECTOR (4 downto 0);
        data_read_reg1 : out STD_LOGIC_VECTOR (31 downto 0);
        data_read_reg2 : out STD_LOGIC_VECTOR (31 downto 0);
        data_write_reg : in STD_LOGIC_VECTOR (31 downto 0));
end component reg_file;

component Mux32 is
    Port ( IN0 : in STD_LOGIC_VECTOR (31 downto 0);
           IN1 : in STD_LOGIC_VECTOR (31 downto 0);
           Sel : in STD_LOGIC;
           Out0 : out STD_LOGIC_VECTOR (31 downto 0));
end component Mux32;

component Mux5 is
    Port ( IN0 : in STD_LOGIC_VECTOR (4 downto 0);
           IN1 : in STD_LOGIC_VECTOR (4 downto 0);
           Sel : in STD_LOGIC;
           Out0 : out STD_LOGIC_VECTOR (4 downto 0));
end component Mux5;

component Mux9 is
    Port ( IN0 : in STD_LOGIC_VECTOR (8 downto 0);
           IN1 : in STD_LOGIC_VECTOR (8 downto 0);
           Sel : in STD_LOGIC;
           Out0 : out STD_LOGIC_VECTOR (8 downto 0));
end component Mux9;

signal Mux1Sel,RegDst, Jump, Branch, MemRead, MemtoReg, ALUSrc, RegWrite, clk_mem : STD_LOGIC;
signal MemWrite : STD_LOGIC_VECTOR ( 0 downto 0 );
signal ALUOp : STD_LOGIC_VECTOR ( 1 downto 0 );
signal flags, ALUOp_extend : STD_LOGIC_VECTOR ( 3 downto 0 );
signal inst,WriteDataR, SignEXT, ALUIn2 , ReadData, ALUresult, ReadData1, ReadData2 : STD_LOGIC_VECTOR (31 downto 0);
signal WriteRegister: STD_LOGIC_VECTOR (4 downto 0 );
signal PCAluOut, Mux1Out, pc_jump, pc, newpc, pc_plus4: STD_LOGIC_VECTOR (8 downto 0);

begin


MemDataOuttst <= ReadData;
MemDataIntst <= ReadData2;
memreadtst <= MemRead;
memwritetst <= MemWrite;
ALUOp_intst <= ALUOp;
port1tst <= ReadData1;
port2tst <= aluIN2;
ALUcontroltst <= ALUOp_extend;
ALUouttst <= ALUresult;
Registerin1 <= inst(25 downto 21);
Registerin2 <= inst(20 downto 16);
RegisterWriteto <= Writeregister;
RegisterWriteData <= WritedataR;
regreadtst1 <= readdata1;
regreadtst2 <= readdata2;
showpc <= pc;
ins <= inst;

Mux1Sel <= ((not flags(2)) and Branch) when inst(31 downto 26) = "000101" else (flags(2) and Branch);


process(clk, rst)
begin

if (rst = '1') then
    pc <= "000000000";  
--elsif ((Mux1Sel = '1' and Jump = '0') or (Jump = '1')) then
--pc <= newpc;
elsif (falling_edge(clk)) then
pc <= newpc;
end if;


end process;


pc_plus4 <= std_logic_vector(signed(pc) + to_signed(1, pc'length));
pc_jump <= std_logic_vector(signed(pc_plus4) + signed(inst(8 downto 0)));
PCAluOut <= std_logic_vector(signed(pc_plus4) + (signed(inst(8 downto 0))));
SignExt <= "0000000000000000" & inst(15 downto 0);




control_signal: control
port map(   clk_c => clk,
            rst_c => rst,
            inst_31_26 => inst(31 downto 26),
            RegDst_c => RegDst,
            Jump_c => Jump,
            Branch_c => Branch,
            MemRead_c => MemRead,
            MemtoReg_c => MemtoReg,
            ALUOp_c => ALUOp,
            MemWrite_c => MemWrite,
            ALUSrc_c => ALUSrc,
            RegWrite_c => RegWrite);    
            
ALU_con: ALU_control
  Port Map (ALUOp_in => ALUOp,
        inst_ALU_con => inst(5 downto 0),
        ALUcontrol_out => ALUOp_extend);      
         
registerfile : reg_file     
  Port Map (clk_r => clk,
            rst_r => rst,
            RegWrite_r => RegWrite,
            read_reg1 => inst(25 downto 21),
            read_reg2 => inst(20 downto 16),
            write_reg => WriteRegister,
            data_read_reg1 => ReadData1,
            data_read_reg2 => ReadData2,
            data_write_reg => WritedataR);  
            
dataMem : blk_mem_gen_0
  PORT MAP (
    clka => clk,
    ena => '1',
    wea => MemWrite,
    addra => ALUresult(9 downto 0),
    dina => ReadData2,
    douta => ReadData);

InstructionMem : blk_mem_gen_1
  PORT MAP (
    clka => clk,
    ena => '1',
    addra => pc,
    douta => inst);

ALUs : ALU
port map (port1 => ReadData1,
port2 => ALUIn2,
clk_alu => clk,
ALUcontrol => ALUOp_extend,
flags_alu => flags, -- N, Z, C, V in order
shiftamt => inst(10 downto 6),
ALUout => ALUresult);

Mux1: Mux9
port map(
    In0 => pc_plus4,
    In1 => PCAluOut,
    sel => Mux1Sel,
    Out0 => Mux1Out);

Mux2: Mux9
port map(
    In0 => Mux1Out,
    In1 => pc_jump,
    sel => jump,
    Out0 => newpc);

Mux3: Mux5
port map(
    In0 => inst(20 downto 16),
    In1 => inst(15 downto 11),
    sel => RegDst,
    Out0 => WriteRegister);
    
Mux4: Mux32
port map(
    In0 => ReadData2,
    In1 => SignExt,
    sel => ALUSrc,
    Out0 => ALUIn2);
    
Mux6: Mux32  
port map(
    In0 => ALUresult,
    In1 => ReadData,
    sel => MemToReg,
    Out0 => WritedataR);
end Behavioral;
